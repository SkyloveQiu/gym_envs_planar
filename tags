!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AccController	planarenvs/nLinkReacher/resources/accController.py	/^class AccController(object):$/;"	c
AccEnv	planarenvs/planar_common/acc_env.py	/^class AccEnv(object):$/;"	c
BASE_HEIGHT	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    BASE_HEIGHT = 1.0 # [m]$/;"	v	class:MobileBaseEnv
BASE_HEIGHT	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    BASE_HEIGHT = 1.0 # [m]$/;"	v	class:MobileRobotEnv
BASE_LENGTH	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    BASE_LENGTH = 1.3  # [m]$/;"	v	class:GroundRobotEnv
BASE_WHEEL_DIST	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    BASE_WHEEL_DIST = 0.6  # [m]$/;"	v	class:GroundRobotEnv
BASE_WIDTH	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    BASE_WIDTH = 1.0  # [m]$/;"	v	class:GroundRobotEnv
BASE_WIDTH	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    BASE_WIDTH = 1.0 # [m]$/;"	v	class:MobileBaseEnv
BASE_WIDTH	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    BASE_WIDTH = 1.0 # [m]$/;"	v	class:MobileRobotEnv
GoalSensor	planarenvs/sensors/GoalSensor.py	/^class GoalSensor(Sensor):$/;"	c
GroundRobotAccEnv	planarenvs/groundRobots/envs/acc.py	/^class GroundRobotAccEnv(GroundRobotEnv):$/;"	c
GroundRobotArmAccEnv	planarenvs/groundRobots/envs/acc_arm.py	/^class GroundRobotArmAccEnv(GroundRobotArmEnv):$/;"	c
GroundRobotArmEnv	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^class GroundRobotArmEnv(GroundRobotEnv):$/;"	c
GroundRobotArmVelEnv	planarenvs/groundRobots/envs/vel_arm.py	/^class GroundRobotArmVelEnv(GroundRobotArmEnv):$/;"	c
GroundRobotEnv	planarenvs/groundRobots/envs/groundRobotEnv.py	/^class GroundRobotEnv(PlanarEnv):$/;"	c
GroundRobotVelEnv	planarenvs/groundRobots/envs/vel.py	/^class GroundRobotVelEnv(GroundRobotEnv):$/;"	c
LINK_LENGTH	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    LINK_LENGTH = 1.0$/;"	v	class:GroundRobotArmEnv
LINK_LENGTH	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    LINK_LENGTH = 1.0 # [m]$/;"	v	class:MobileRobotEnv
LINK_LENGTH	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    LINK_LENGTH = 1.0  # [m]$/;"	v	class:NLinkReacherEnv
LINK_MASS	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    LINK_MASS = 1.0$/;"	v	class:NLinkReacherEnv
LINK_MASS_BASE	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    LINK_MASS_BASE = 5.0  #: [kg] mass of link 1$/;"	v	class:GroundRobotEnv
LINK_MASS_BASE	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    LINK_MASS_BASE = 500.0  #: [kg] mass of link 1$/;"	v	class:MobileBaseEnv
MAX_ACC	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    MAX_ACC = 1.0$/;"	v	class:MobileBaseEnv
MAX_ACC	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_ACC = 8 * np.pi$/;"	v	class:MobileRobotEnv
MAX_ACC	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    MAX_ACC = 9 * pi$/;"	v	class:NLinkReacherEnv
MAX_ACC	planarenvs/point_robot/envs/point_robot_env.py	/^    MAX_ACC = 10$/;"	v	class:PointRobotEnv
MAX_ACC_BASE	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_ACC_BASE = 100$/;"	v	class:GroundRobotEnv
MAX_ACC_BASE	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_ACC_BASE = 10.0$/;"	v	class:MobileRobotEnv
MAX_ACC_BASE_THETA	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_ACC_BASE_THETA = 100$/;"	v	class:GroundRobotEnv
MAX_ACC_FORWARD	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_ACC_FORWARD = 100$/;"	v	class:GroundRobotEnv
MAX_ARM_ACC	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    MAX_ARM_ACC = 9 * np.pi$/;"	v	class:GroundRobotArmEnv
MAX_ARM_POS	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    MAX_ARM_POS = 5 * np.pi$/;"	v	class:GroundRobotArmEnv
MAX_ARM_VEL	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    MAX_ARM_VEL = 4 * np.pi$/;"	v	class:GroundRobotArmEnv
MAX_FOR	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    MAX_FOR = 100$/;"	v	class:MobileBaseEnv
MAX_FOR	planarenvs/point_robot/envs/point_robot_env.py	/^    MAX_FOR = 100$/;"	v	class:PointRobotEnv
MAX_FOR_BASE	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_FOR_BASE = 100.0$/;"	v	class:MobileRobotEnv
MAX_POS	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    MAX_POS = 5.0$/;"	v	class:MobileBaseEnv
MAX_POS	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_POS = np.pi$/;"	v	class:MobileRobotEnv
MAX_POS	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    MAX_POS = pi$/;"	v	class:NLinkReacherEnv
MAX_POS	planarenvs/point_robot/envs/point_robot_env.py	/^    MAX_POS = 10$/;"	v	class:PointRobotEnv
MAX_POS_BASE	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_POS_BASE = 5$/;"	v	class:GroundRobotEnv
MAX_POS_BASE	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_POS_BASE = 5.0$/;"	v	class:MobileRobotEnv
MAX_POS_BASE_THETA	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_POS_BASE_THETA = 5 * np.pi$/;"	v	class:GroundRobotEnv
MAX_TOR	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_TOR = 1000$/;"	v	class:MobileRobotEnv
MAX_TOR	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    MAX_TOR = 1000$/;"	v	class:NLinkReacherEnv
MAX_VEL	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    MAX_VEL = 1$/;"	v	class:MobileBaseEnv
MAX_VEL	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_VEL = 4 * np.pi$/;"	v	class:MobileRobotEnv
MAX_VEL	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    MAX_VEL = 4 * pi$/;"	v	class:NLinkReacherEnv
MAX_VEL	planarenvs/point_robot/envs/point_robot_env.py	/^    MAX_VEL = 10$/;"	v	class:PointRobotEnv
MAX_VEL_BASE	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_VEL_BASE = 5$/;"	v	class:GroundRobotEnv
MAX_VEL_BASE	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    MAX_VEL_BASE = 1$/;"	v	class:MobileRobotEnv
MAX_VEL_BASE_THETA	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_VEL_BASE_THETA = 5$/;"	v	class:GroundRobotEnv
MAX_VEL_FORWARD	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    MAX_VEL_FORWARD = 3.0$/;"	v	class:GroundRobotEnv
MobileBaseAccEnv	planarenvs/mobileBase/envs/acc.py	/^class MobileBaseAccEnv(AccEnv, MobileBaseEnv):$/;"	c
MobileBaseEnv	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^class MobileBaseEnv(PlanarEnv):$/;"	c
MobileBaseVelEnv	planarenvs/mobileBase/envs/vel.py	/^class MobileBaseVelEnv(VelEnv, MobileBaseEnv):$/;"	c
MobileRobotAccEnv	planarenvs/mobileRobot/envs/acc.py	/^class MobileRobotAccEnv(AccEnv, MobileRobotEnv):$/;"	c
MobileRobotEnv	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^class MobileRobotEnv(PlanarEnv):$/;"	c
MobileRobotVelEnv	planarenvs/mobileRobot/envs/vel.py	/^class MobileRobotVelEnv(VelEnv, MobileRobotEnv):$/;"	c
NLinkAccReacherEnv	planarenvs/nLinkReacher/envs/acc.py	/^class NLinkAccReacherEnv(AccEnv, NLinkReacherEnv):$/;"	c
NLinkReacherEnv	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^class NLinkReacherEnv(PlanarEnv):$/;"	c
NLinkTorReacherEnv	planarenvs/nLinkReacher/envs/tor.py	/^class NLinkTorReacherEnv(NLinkReacherEnv):$/;"	c
NLinkVelReacherEnv	planarenvs/nLinkReacher/envs/vel.py	/^class NLinkVelReacherEnv(VelEnv, NLinkReacherEnv):$/;"	c
ObstacleSensor	planarenvs/sensors/ObstacleSensor.py	/^class ObstacleSensor(Sensor):$/;"	c
PlanarEnv	planarenvs/planar_common/planar_env.py	/^class PlanarEnv(core.Env):$/;"	c
PointRobotAccEnv	planarenvs/point_robot/envs/acc.py	/^class PointRobotAccEnv(AccEnv, PointRobotEnv):$/;"	c
PointRobotEnv	planarenvs/point_robot/envs/point_robot_env.py	/^class PointRobotEnv(PlanarEnv):$/;"	c
PointRobotVelEnv	planarenvs/point_robot/envs/vel.py	/^class PointRobotVelEnv(VelEnv, PointRobotEnv):$/;"	c
Sensor	planarenvs/sensors/SensorCommon.py	/^class Sensor(ABC):$/;"	c
VelEnv	planarenvs/planar_common/vel_env.py	/^class VelEnv(object):$/;"	c
WrongObservationError	planarenvs/planar_common/planar_env.py	/^class WrongObservationError(Exception):$/;"	c
__init__	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    def __init__(self, render=False, dt=0.01, n_arm=1):$/;"	m	class:GroundRobotArmEnv
__init__	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def __init__(self, render=False, dt=0.01):$/;"	m	class:GroundRobotEnv
__init__	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    def __init__(self, render=False, dt=0.01):$/;"	m	class:MobileBaseEnv
__init__	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def __init__(self, render=False, n=2, dt=0.01):$/;"	m	class:MobileRobotEnv
__init__	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def __init__(self, render=False, n=2, dt=0.01):$/;"	m	class:NLinkReacherEnv
__init__	planarenvs/nLinkReacher/envs/tor.py	/^    def __init__(self, render=False, n=2, dt=0.01, friction=0.0):$/;"	m	class:NLinkTorReacherEnv
__init__	planarenvs/nLinkReacher/resources/accController.py	/^    def __init__(self, n, l, m, g, k):$/;"	m	class:AccController
__init__	planarenvs/planar_common/planar_env.py	/^    def __init__(self, msg, observation, observation_space):$/;"	m	class:WrongObservationError
__init__	planarenvs/planar_common/planar_env.py	/^    def __init__(self, render: bool = False, dt=0.01):$/;"	m	class:PlanarEnv
__init__	planarenvs/point_robot/envs/point_robot_env.py	/^    def __init__(self, n=2, dt=0.01, render=False):$/;"	m	class:PointRobotEnv
__init__	planarenvs/sensors/GoalSensor.py	/^    def __init__(self, nbGoals=0, limSensor=10, mode="position"):$/;"	m	class:GoalSensor
__init__	planarenvs/sensors/ObstacleSensor.py	/^    def __init__(self, nbObstacles=0, limSensor=10, mode="position"):$/;"	m	class:ObstacleSensor
__init__	planarenvs/sensors/SensorCommon.py	/^    def __init__(self, nbObservations, limSensor=10):$/;"	m	class:Sensor
_get_ob	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def _get_ob(self):$/;"	m	class:MobileRobotEnv
_get_ob	planarenvs/planar_common/planar_env.py	/^    def _get_ob(self):$/;"	m	class:PlanarEnv
_reset	planarenvs/sensors/GoalSensor.py	/^    def _reset(self):$/;"	m	class:GoalSensor
_reset	planarenvs/sensors/ObstacleSensor.py	/^    def _reset(self):$/;"	m	class:ObstacleSensor
_reset	planarenvs/sensors/SensorCommon.py	/^    def _reset(self):$/;"	m	class:Sensor
_reward	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def _reward(self):$/;"	m	class:GroundRobotEnv
_reward	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    def _reward(self):$/;"	m	class:MobileBaseEnv
_reward	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def _reward(self):$/;"	m	class:MobileRobotEnv
_reward	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def _reward(self):$/;"	m	class:NLinkReacherEnv
_reward	planarenvs/planar_common/planar_env.py	/^    def _reward(self):$/;"	m	class:PlanarEnv
_reward	planarenvs/point_robot/envs/point_robot_env.py	/^    def _reward(self):$/;"	m	class:PointRobotEnv
_setSensorName	planarenvs/sensors/GoalSensor.py	/^    def _setSensorName(self):$/;"	m	class:GoalSensor
_setSensorName	planarenvs/sensors/ObstacleSensor.py	/^    def _setSensorName(self):$/;"	m	class:ObstacleSensor
_terminal	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def _terminal(self):$/;"	m	class:GroundRobotEnv
_terminal	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    def _terminal(self):$/;"	m	class:MobileBaseEnv
_terminal	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def _terminal(self):$/;"	m	class:MobileRobotEnv
_terminal	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def _terminal(self):$/;"	m	class:NLinkReacherEnv
_terminal	planarenvs/planar_common/planar_env.py	/^    def _terminal(self):$/;"	m	class:PlanarEnv
_terminal	planarenvs/point_robot/envs/point_robot_env.py	/^    def _terminal(self):$/;"	m	class:PointRobotEnv
add_goal	planarenvs/planar_common/planar_env.py	/^    def add_goal(self, goal):$/;"	m	class:PlanarEnv
add_obstacle	planarenvs/planar_common/planar_env.py	/^    def add_obstacle(self, obst):$/;"	m	class:PlanarEnv
add_sensor	planarenvs/planar_common/planar_env.py	/^    def add_sensor(self, sensor):$/;"	m	class:PlanarEnv
analyticGoal	examples/goal.py	/^analyticGoal = DynamicSubGoal(name="goal2", contentDict=analyticGoalDict)$/;"	v
analyticGoalDict	examples/goal.py	/^analyticGoalDict = {$/;"	v
close	planarenvs/planar_common/planar_env.py	/^    def close(self):$/;"	m	class:PlanarEnv
computeXdot	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def computeXdot(self, x, vel):$/;"	m	class:GroundRobotEnv
continuous_dynamics	planarenvs/groundRobots/envs/acc.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:GroundRobotAccEnv
continuous_dynamics	planarenvs/groundRobots/envs/acc_arm.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:GroundRobotArmAccEnv
continuous_dynamics	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:GroundRobotEnv
continuous_dynamics	planarenvs/groundRobots/envs/vel.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:GroundRobotVelEnv
continuous_dynamics	planarenvs/groundRobots/envs/vel_arm.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:GroundRobotArmVelEnv
continuous_dynamics	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:MobileBaseEnv
continuous_dynamics	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:MobileRobotEnv
continuous_dynamics	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:NLinkReacherEnv
continuous_dynamics	planarenvs/nLinkReacher/envs/tor.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:NLinkTorReacherEnv
continuous_dynamics	planarenvs/planar_common/acc_env.py	/^    def continuous_dynamics(self, x, t):  # pylint: disable=unused-argument$/;"	m	class:AccEnv
continuous_dynamics	planarenvs/planar_common/planar_env.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:PlanarEnv
continuous_dynamics	planarenvs/planar_common/vel_env.py	/^    def continuous_dynamics(self, x, t):  # pylint: disable=unused-argument$/;"	m	class:VelEnv
continuous_dynamics	planarenvs/point_robot/envs/point_robot_env.py	/^    def continuous_dynamics(self, x, t):$/;"	m	class:PointRobotEnv
control	planarenvs/nLinkReacher/resources/accController.py	/^    def control(self, q, qdot, qddot):$/;"	m	class:AccController
createDynamics	planarenvs/nLinkReacher/resources/createDynamics.py	/^def createDynamics(n):$/;"	f
dist2circ	planarenvs/sensors/SensorCommon.py	/^def dist2circ(pointPos, circlePos, circleRadius):$/;"	f
dt	planarenvs/planar_common/planar_env.py	/^    def dt(self):$/;"	m	class:PlanarEnv
dynamicObst1Dict	examples/obstacles.py	/^dynamicObst1Dict = {$/;"	v
dynamicObst2Dict	examples/obstacles.py	/^dynamicObst2Dict = {$/;"	v
dynamicSphereObst1	examples/obstacles.py	/^dynamicSphereObst1 = DynamicSphereObstacle(name="dynamicSphere", contentDict= dynamicObst1Dict)$/;"	v
dynamicSphereObst2	examples/obstacles.py	/^dynamicSphereObst2 = DynamicSphereObstacle(name="dynamicSphere", contentDict= dynamicObst2Dict)$/;"	v
entry_point	planarenvs/groundRobots/__init__.py	/^    entry_point='planarenvs.groundRobots.envs:GroundRobotAccEnv'$/;"	v
entry_point	planarenvs/groundRobots/__init__.py	/^    entry_point='planarenvs.groundRobots.envs:GroundRobotArmAccEnv'$/;"	v
entry_point	planarenvs/groundRobots/__init__.py	/^    entry_point='planarenvs.groundRobots.envs:GroundRobotArmVelEnv'$/;"	v
entry_point	planarenvs/groundRobots/__init__.py	/^    entry_point='planarenvs.groundRobots.envs:GroundRobotVelEnv'$/;"	v
entry_point	planarenvs/mobileBase/__init__.py	/^    entry_point='planarenvs.mobileBase.envs:MobileBaseAccEnv'$/;"	v
entry_point	planarenvs/mobileBase/__init__.py	/^    entry_point='planarenvs.mobileBase.envs:MobileBaseVelEnv'$/;"	v
entry_point	planarenvs/mobileRobot/__init__.py	/^    entry_point='planarenvs.mobileRobot.envs:MobileRobotAccEnv'$/;"	v
entry_point	planarenvs/mobileRobot/__init__.py	/^    entry_point='planarenvs.mobileRobot.envs:MobileRobotVelEnv'$/;"	v
entry_point	planarenvs/nLinkReacher/__init__.py	/^    entry_point='planarenvs.nLinkReacher.envs:NLinkAccReacherEnv'$/;"	v
entry_point	planarenvs/nLinkReacher/__init__.py	/^    entry_point='planarenvs.nLinkReacher.envs:NLinkTorReacherEnv'$/;"	v
entry_point	planarenvs/nLinkReacher/__init__.py	/^    entry_point='planarenvs.nLinkReacher.envs:NLinkVelReacherEnv'$/;"	v
entry_point	planarenvs/point_robot/__init__.py	/^    entry_point='planarenvs.point_robot.envs:PointRobotAccEnv'$/;"	v
entry_point	planarenvs/point_robot/__init__.py	/^    entry_point='planarenvs.point_robot.envs:PointRobotVelEnv'$/;"	v
getOSpaceSize	planarenvs/sensors/SensorCommon.py	/^    def getOSpaceSize(self):$/;"	m	class:Sensor
getObservationSpace	planarenvs/sensors/SensorCommon.py	/^    def getObservationSpace(self):$/;"	m	class:Sensor
get_wrong_observation	planarenvs/planar_common/planar_env.py	/^    def get_wrong_observation($/;"	m	class:WrongObservationError
goal	examples/nLink_reacher.py	/^goal = False$/;"	v
goal	examples/point_robot.py	/^goal = True$/;"	v
id	planarenvs/groundRobots/__init__.py	/^    id='ground-robot-acc-v0',$/;"	v
id	planarenvs/groundRobots/__init__.py	/^    id='ground-robot-arm-acc-v0',$/;"	v
id	planarenvs/groundRobots/__init__.py	/^    id='ground-robot-arm-vel-v0',$/;"	v
id	planarenvs/groundRobots/__init__.py	/^    id='ground-robot-vel-v0',$/;"	v
id	planarenvs/mobileBase/__init__.py	/^    id='mobile-base-acc-v0',$/;"	v
id	planarenvs/mobileBase/__init__.py	/^    id='mobile-base-vel-v0',$/;"	v
id	planarenvs/mobileRobot/__init__.py	/^    id='mobile-robot-acc-v0',$/;"	v
id	planarenvs/mobileRobot/__init__.py	/^    id='mobile-robot-vel-v0',$/;"	v
id	planarenvs/nLinkReacher/__init__.py	/^    id='nLink-reacher-acc-v0',$/;"	v
id	planarenvs/nLinkReacher/__init__.py	/^    id='nLink-reacher-tor-v0',$/;"	v
id	planarenvs/nLinkReacher/__init__.py	/^    id='nLink-reacher-vel-v0',$/;"	v
id	planarenvs/point_robot/__init__.py	/^    id='point-robot-acc-v0',$/;"	v
id	planarenvs/point_robot/__init__.py	/^    id='point-robot-vel-v0',$/;"	v
integrate	planarenvs/groundRobots/envs/acc.py	/^    def integrate(self):$/;"	m	class:GroundRobotAccEnv
integrate	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    def integrate(self):$/;"	m	class:GroundRobotArmEnv
integrate	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def integrate(self):$/;"	m	class:GroundRobotEnv
integrate	planarenvs/groundRobots/envs/vel.py	/^    def integrate(self):$/;"	m	class:GroundRobotVelEnv
integrate	planarenvs/groundRobots/envs/vel_arm.py	/^    def integrate(self):$/;"	m	class:GroundRobotArmVelEnv
integrate	planarenvs/planar_common/planar_env.py	/^    def integrate(self):$/;"	m	class:PlanarEnv
integrate	planarenvs/planar_common/vel_env.py	/^    def integrate(self):$/;"	m	class:VelEnv
joinLimits	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def joinLimits(self, limBas, limArm):$/;"	m	class:MobileRobotEnv
main	examples/ground_robot.py	/^def main():$/;"	f
main	examples/ground_robot_arm.py	/^def main():$/;"	f
main	examples/mobile_base.py	/^def main():$/;"	f
main	examples/mobile_robot.py	/^def main():$/;"	f
main	examples/nLink_reacher.py	/^def main():$/;"	f
main	examples/point_robot.py	/^def main():$/;"	f
main	planarenvs/nLinkReacher/resources/createDynamics.py	/^def main():$/;"	f
name	planarenvs/sensors/GoalSensor.py	/^    def name(self):$/;"	m	class:GoalSensor
name	planarenvs/sensors/ObstacleSensor.py	/^    def name(self):$/;"	m	class:ObstacleSensor
name	planarenvs/sensors/SensorCommon.py	/^    def name(self):$/;"	m	class:Sensor
obst1Dict	examples/obstacles.py	/^obst1Dict = {$/;"	v
obst2Dict	examples/obstacles.py	/^obst2Dict = {$/;"	v
obstacles	examples/ground_robot.py	/^obstacles = False$/;"	v
obstacles	examples/ground_robot_arm.py	/^obstacles = False$/;"	v
obstacles	examples/mobile_base.py	/^obstacles = False$/;"	v
obstacles	examples/mobile_robot.py	/^obstacles = False$/;"	v
obstacles	examples/nLink_reacher.py	/^obstacles = False$/;"	v
obstacles	examples/point_robot.py	/^obstacles = True$/;"	v
pointRobotEnv	tests/test_point_robot.py	/^def pointRobotEnv():$/;"	f
render	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    def render(self, mode="human"):$/;"	m	class:GroundRobotArmEnv
render	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def render(self, mode="human", final=True):$/;"	m	class:GroundRobotEnv
render	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    def render(self, mode="human"):$/;"	m	class:MobileBaseEnv
render	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def render(self, mode="human"):$/;"	m	class:MobileRobotEnv
render	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def render(self, mode="human"):$/;"	m	class:NLinkReacherEnv
render	planarenvs/planar_common/planar_env.py	/^    def render(self, mode="human"):$/;"	m	class:PlanarEnv
render	planarenvs/point_robot/envs/point_robot_env.py	/^    def render(self, mode="human"):$/;"	m	class:PointRobotEnv
renderBase	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def renderBase(self):$/;"	m	class:MobileRobotEnv
renderBase	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def renderBase(self):$/;"	m	class:NLinkReacherEnv
renderEndEffector	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def renderEndEffector(self):$/;"	m	class:MobileRobotEnv
renderEndEffector	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def renderEndEffector(self):$/;"	m	class:NLinkReacherEnv
renderLink	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def renderLink(self, i):$/;"	m	class:MobileRobotEnv
renderLink	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def renderLink(self, i):$/;"	m	class:NLinkReacherEnv
render_common	planarenvs/planar_common/planar_env.py	/^    def render_common(self, bounds):$/;"	m	class:PlanarEnv
reset	planarenvs/groundRobots/envs/groundRobotArmEnv.py	/^    def reset(self, pos=None, vel=None):$/;"	m	class:GroundRobotArmEnv
reset	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def reset(self, pos=None, vel=None):$/;"	m	class:GroundRobotEnv
reset	planarenvs/planar_common/planar_env.py	/^    def reset(self, pos: np.ndarray = None, vel: np.ndarray = None) -> dict:$/;"	m	class:PlanarEnv
reset_common	planarenvs/planar_common/planar_env.py	/^    def reset_common(self):$/;"	m	class:PlanarEnv
reset_limits	planarenvs/point_robot/envs/point_robot_env.py	/^    def reset_limits(self, **kwargs):$/;"	m	class:PointRobotEnv
seed	planarenvs/planar_common/planar_env.py	/^    def seed(self, seed=None):$/;"	m	class:PlanarEnv
sense	planarenvs/sensors/GoalSensor.py	/^    def sense(self, state, goals, obstacles, t=0):$/;"	m	class:GoalSensor
sense	planarenvs/sensors/ObstacleSensor.py	/^    def sense(self, state, goals, obstacles, t=0):$/;"	m	class:ObstacleSensor
sense	planarenvs/sensors/SensorCommon.py	/^    def sense(self, s, goals, obstacles, t=0):$/;"	m	class:Sensor
sensors	examples/point_robot.py	/^sensors = True$/;"	v
setSpaces	planarenvs/groundRobots/envs/acc.py	/^    def setSpaces(self):$/;"	m	class:GroundRobotAccEnv
setSpaces	planarenvs/groundRobots/envs/acc_arm.py	/^    def setSpaces(self):$/;"	m	class:GroundRobotArmAccEnv
setSpaces	planarenvs/groundRobots/envs/groundRobotEnv.py	/^    def setSpaces(self):$/;"	m	class:GroundRobotEnv
setSpaces	planarenvs/groundRobots/envs/vel.py	/^    def setSpaces(self):$/;"	m	class:GroundRobotVelEnv
setSpaces	planarenvs/groundRobots/envs/vel_arm.py	/^    def setSpaces(self):$/;"	m	class:GroundRobotArmVelEnv
setSpaces	planarenvs/mobileBase/envs/mobileBaseEnv.py	/^    def setSpaces(self):$/;"	m	class:MobileBaseEnv
setSpaces	planarenvs/mobileRobot/envs/mobileRobotEnv.py	/^    def setSpaces(self):$/;"	m	class:MobileRobotEnv
setSpaces	planarenvs/nLinkReacher/envs/nLinkReacherEnv.py	/^    def setSpaces(self):$/;"	m	class:NLinkReacherEnv
setSpaces	planarenvs/nLinkReacher/envs/tor.py	/^    def setSpaces(self):$/;"	m	class:NLinkTorReacherEnv
set_spaces	planarenvs/planar_common/acc_env.py	/^    def set_spaces(self):$/;"	m	class:AccEnv
set_spaces	planarenvs/planar_common/planar_env.py	/^    def set_spaces(self):$/;"	m	class:PlanarEnv
set_spaces	planarenvs/planar_common/vel_env.py	/^    def set_spaces(self):$/;"	m	class:VelEnv
set_spaces	planarenvs/point_robot/envs/point_robot_env.py	/^    def set_spaces(self):$/;"	m	class:PointRobotEnv
sphereObst1	examples/obstacles.py	/^sphereObst1 = SphereObstacle(name="simpleSphere", contentDict=obst1Dict)$/;"	v
sphereObst2	examples/obstacles.py	/^sphereObst2 = SphereObstacle(name="simpleSphere", contentDict=obst2Dict)$/;"	v
splineDict	examples/goal.py	/^splineDict = {'degree': 2, 'controlPoints': [[-2.0, 1.0], [2.0, 0.0],[4.0, 2.0], [3.0, 2.0]], 'duration': 10}$/;"	v
splineDict	examples/obstacles.py	/^splineDict = {'degree': 2, 'controlPoints': [[0.0, 0.0], [5.0, 0.0],[5.0, 5.0]], 'duration': 10}$/;"	v
splineGoal	examples/goal.py	/^splineGoal = DynamicSubGoal(name="goal2", contentDict=splineGoalDict)$/;"	v
splineGoalDict	examples/goal.py	/^splineGoalDict = {$/;"	v
staticGoal	examples/goal.py	/^staticGoal = StaticSubGoal(name="goal1", contentDict=staticGoalDict)$/;"	v
staticGoalDict	examples/goal.py	/^staticGoalDict = {$/;"	v
step	planarenvs/planar_common/planar_env.py	/^    def step(self, action: np.ndarray) -> tuple:$/;"	m	class:PlanarEnv
t	planarenvs/planar_common/planar_env.py	/^    def t(self):$/;"	m	class:PlanarEnv
test_pointRobot	tests/test_point_robot.py	/^def test_pointRobot(pointRobotEnv):$/;"	f
